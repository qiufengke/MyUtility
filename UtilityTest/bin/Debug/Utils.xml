<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utils</name>
    </assembly>
    <members>
        <member name="T:Utils.AlgorithmUtil">
            <summary>
            算法辅助类
            </summary>
        </member>
        <member name="M:Utils.AlgorithmUtil.SimpleInsertSort(System.Int32[])">
            <summary>
            算法实现：直接插入排序
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Utils.AlgorithmUtil.PrintRange(Utils.BsTree,System.Int32,System.Int32,System.Int32@)">
            <summary>
            求节点值在 [min,max] 之间的所有节点
            从小到大顺序输出
            二叉树特点： 左子树节点值《 父节点值《 右子树节点值
            </summary>
            <param name="root"></param>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="count">无实际意义，用于记录循环次数</param>
        </member>
        <member name="T:Utils.BsTree">
            <summary>
            二叉树
            </summary>
        </member>
        <member name="F:Utils.BsTree.LeftChrild">
            <summary>
            左子节点
            </summary>
        </member>
        <member name="F:Utils.BsTree.RightChrild">
            <summary>
            右子节点
            </summary>
        </member>
        <member name="F:Utils.BsTree.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:Utils.BsTree.#ctor(System.Int32,Utils.BsTree,Utils.BsTree)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="T:Utils.EncryptUtil">
            <summary>
            加解密辅助类
            </summary>
        </member>
        <member name="M:Utils.EncryptUtil.DesEncrypt(System.String,System.String)">
            <summary>
            Des 加密
            </summary>
            <param name="encryptStr"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Utils.EncryptUtil.DesDecrypt(System.String,System.String)">
            <summary>
            Des 解密
            </summary>
            <param name="decryptStr"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Utils.EncryptUtil.Encrypt3Des(System.String,System.String)">
            <summary>
            3DES 加密
            </summary>
            <param name="encryStr">加密字符串</param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Utils.EncryptUtil.Decrypt3Des(System.String,System.String)">
            <summary>
            3DES 解密
            </summary>
            <param name="decryStr"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Utils.Extensions.TypeExtension.GetDefault(System.Type)">
            <summary>
            获取Type默认值
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Utils.OrmUtil">
            <summary>
            ORM 映射类
            </summary>
        </member>
        <member name="M:Utils.OrmUtil.MapToModel``1(System.Data.IDataReader,System.Collections.Generic.List{System.String})">
            <summary>
            将 DataReader 转化为 对应实体对象 ,只对属性赋值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataReader"></param>
            <param name="onlyFields">需要转换的特定字段</param>
            <returns></returns>
        </member>
        <member name="M:Utils.OrmUtil.MapToList``1(System.Data.IDataReader,System.Collections.Generic.List{System.String})">
            <summary>
            将 DataReader 转化为 实体对象集合
            </summary>
            <param name="dataReader"></param>
            <param name="onlyFields"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Utils.EnumUtil">
            <summary>
            枚举辅助类
            </summary>
        </member>
        <member name="M:Utils.EnumUtil.GetDesciption(System.Enum)">
            <summary>
            获取枚举值的描述
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Utils.PinYinUtil">
            <summary>
            拼音辅助类
            </summary>
        </member>
        <member name="M:Utils.PinYinUtil.GetFirst(System.Char)">
            <summary>
            取拼音第一个字段
            </summary>        
            <param name="ch"></param>        
            <returns></returns>        
        </member>
        <member name="M:Utils.PinYinUtil.GetFirst(System.String)">
            <summary>
            取拼音第一个字段
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Utils.PinYinUtil.Get(System.Char)">
            <summary>
            获取单字拼音
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Utils.PinYinUtil.ConvertToPinyin(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="F:Utils.PinYinUtil.otherChinese">
            <summary>
            二级汉字数组
            </summary>
        </member>
        <member name="F:Utils.PinYinUtil.otherPinYin">
            <summary>
            二级汉字对应拼音数组
            </summary>
        </member>
        <member name="T:Utils.TxtUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:Utils.TxtUtil.WriteTxt(System.String,System.String,System.String)">
            <summary>
            以追加方式写入到TXT
            </summary>
            <param name="content"></param>
            <param name="path"></param>
            <param name="encodType"></param>
        </member>
        <member name="M:Utils.TxtUtil.ReadTxt(System.String,System.String)">
            <summary>
            读取TXT
            </summary>
            <param name="path"></param>
            <param name="encodType"></param>
            <returns></returns>
        </member>
        <member name="T:Utils.WebUtil">
            <summary>
            web辅助类
            </summary>
        </member>
        <member name="M:Utils.WebUtil.GetClientIp">
            <summary>
            获取客户的ip地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utils.WebUtil.GetMd5(System.String)">
            <summary>
            MD5计算
            </summary>
            <param name="str">需要计算MD5的字符串</param>
            <returns>32位的字符串</returns>
        </member>
        <member name="M:Utils.WebUtil.SendPostRequest(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            发送post请求
            </summary>
            <param name="url"></param>
            <param name="paras"></param>
            <param name="headerParas">请求头参数</param>
            <param name="encodetype"></param>
            <returns></returns>
        </member>
        <member name="T:Utils.XmlUtil">
            <summary>
            XML读写辅助类
            </summary>
        </member>
        <member name="M:Utils.XmlUtil.CreateXml(System.String)">
            <summary>
            返回指定格式的XML内容
            </summary>
            <param name="fileFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Utils.XmlUtil.CreateXml(System.String,System.String)">
            <summary>
            生成XML
            </summary>
            <param name="fileName">文件名(包含路径)</param>
            <param name="fileFormat">eg : /root/red,address[ip=127.0.0.1;id=6],createtime/lastPushTime,city,month/now,bj,six</param>
        </member>
        <member name="M:Utils.XmlUtil.ReadXml(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="node"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utils.XmlUtil.Generate(System.String,System.String[])">
            <summary>
            开始生成XML
            </summary>
            <param name="fileName"></param>
            <param name="nodeList"></param>
        </member>
        <member name="M:Utils.XmlUtil.LinkedNode(System.Int32,System.Collections.Generic.List{System.Xml.XmlElement},System.Xml.XmlDocument,System.Collections.Generic.List{System.String})">
            <summary>
            将XML节点组装到根节点上返回
            </summary>
            <param name="i"></param>
            <param name="childList"></param>
            <param name="doc">必须是同一个doc</param>
            <param name="nodeList"></param>
            <returns></returns>
        </member>
    </members>
</doc>
